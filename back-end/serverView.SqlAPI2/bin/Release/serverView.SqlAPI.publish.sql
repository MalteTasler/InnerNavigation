/*
Deployment script for ServerCheck2

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "ServerCheck2"
:setvar DefaultFilePrefix "ServerCheck2"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL15.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL15.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Dropping unnamed constraint on [dbo].[Server]...';


GO
ALTER TABLE [dbo].[Server] DROP CONSTRAINT [DF__tmp_ms_xx__Creat__49C3F6B7];


GO
PRINT N'Dropping unnamed constraint on [dbo].[Server]...';


GO
ALTER TABLE [dbo].[Server] DROP CONSTRAINT [FK__Server__MemberOf__5BE2A6F2];


GO
PRINT N'Dropping unnamed constraint on [dbo].[Server]...';


GO
ALTER TABLE [dbo].[Server] DROP CONSTRAINT [FK__Server__VirtualH__5CD6CB2B];


GO
PRINT N'Dropping unnamed constraint on [dbo].[Service]...';


GO
ALTER TABLE [dbo].[Service] DROP CONSTRAINT [FK__Service__RunsOn__59FA5E80];


GO
PRINT N'Starting rebuilding table [dbo].[Server]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Server] (
    [Id]           INT                IDENTITY (1, 1) NOT NULL,
    [Comment]      NVARCHAR (MAX)     NULL,
    [Name]         NVARCHAR (MAX)     NULL,
    [MemberOff]    INT                NULL,
    [VirtualHost]  INT                NULL,
    [IPAddress]    NVARCHAR (16)      NULL,
    [Room]         INT                NULL,
    [CreationTime] DATETIMEOFFSET (7) DEFAULT getUTCDate() NULL,
    [DeleteTime]   DATETIMEOFFSET (7) NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[Server])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Server] ON;
        INSERT INTO [dbo].[tmp_ms_xx_Server] ([Id], [Comment], [Name], [MemberOff], [VirtualHost], [IPAddress], [CreationTime], [DeleteTime])
        SELECT   [Id],
                 [Comment],
                 [Name],
                 [MemberOff],
                 [VirtualHost],
                 [IPAddress],
                 [CreationTime],
                 [DeleteTime]
        FROM     [dbo].[Server]
        ORDER BY [Id] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Server] OFF;
    END

DROP TABLE [dbo].[Server];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Server]', N'Server';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating [dbo].[Address]...';


GO
CREATE TABLE [dbo].[Address] (
    [Id]           INT                NOT NULL,
    [Number]       VARCHAR (16)       NULL,
    [Street]       NVARCHAR (32)      NULL,
    [ZIP]          CHAR (5)           NULL,
    [City]         NVARCHAR (16)      NULL,
    [Country]      NVARCHAR (16)      NULL,
    [CreationTime] DATETIMEOFFSET (7) NULL,
    [DeleteTime]   DATETIMEOFFSET (7) NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Location]...';


GO
CREATE TABLE [dbo].[Location] (
    [Id]           INT                NOT NULL,
    [Name]         NVARCHAR (32)      NULL,
    [Address]      INT                NULL,
    [CreationTime] DATETIMEOFFSET (7) NULL,
    [DeleteTime]   DATETIMEOFFSET (7) NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Room]...';


GO
CREATE TABLE [dbo].[Room] (
    [Id]           INT                NOT NULL,
    [Name]         NVARCHAR (16)      NULL,
    [Sector]       INT                NULL,
    [CreationTime] DATETIMEOFFSET (7) NULL,
    [DeleteTime]   DATETIMEOFFSET (7) NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Sector]...';


GO
CREATE TABLE [dbo].[Sector] (
    [Id]           INT                NOT NULL,
    [Name]         VARCHAR (8)        NULL,
    [Location]     INT                NULL,
    [CreationTime] DATETIMEOFFSET (7) NULL,
    [DeleteTime]   DATETIMEOFFSET (7) NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating unnamed constraint on [dbo].[Address]...';


GO
ALTER TABLE [dbo].[Address]
    ADD DEFAULT getUTCDate() FOR [CreationTime];


GO
PRINT N'Creating unnamed constraint on [dbo].[Location]...';


GO
ALTER TABLE [dbo].[Location]
    ADD DEFAULT getUTCDate() FOR [CreationTime];


GO
PRINT N'Creating unnamed constraint on [dbo].[Room]...';


GO
ALTER TABLE [dbo].[Room]
    ADD DEFAULT getUTCDate() FOR [CreationTime];


GO
PRINT N'Creating unnamed constraint on [dbo].[Sector]...';


GO
ALTER TABLE [dbo].[Sector]
    ADD DEFAULT getUTCDate() FOR [CreationTime];


GO
PRINT N'Creating unnamed constraint on [dbo].[Server]...';


GO
ALTER TABLE [dbo].[Server] WITH NOCHECK
    ADD FOREIGN KEY ([MemberOff]) REFERENCES [dbo].[Network] ([Id]);


GO
PRINT N'Creating unnamed constraint on [dbo].[Server]...';


GO
ALTER TABLE [dbo].[Server] WITH NOCHECK
    ADD FOREIGN KEY ([VirtualHost]) REFERENCES [dbo].[Server] ([Id]);


GO
PRINT N'Creating unnamed constraint on [dbo].[Service]...';


GO
ALTER TABLE [dbo].[Service] WITH NOCHECK
    ADD FOREIGN KEY ([RunsOn]) REFERENCES [dbo].[Server] ([Id]);


GO
PRINT N'Creating unnamed constraint on [dbo].[Server]...';


GO
ALTER TABLE [dbo].[Server] WITH NOCHECK
    ADD FOREIGN KEY ([Room]) REFERENCES [dbo].[Room] ([Id]);


GO
PRINT N'Creating unnamed constraint on [dbo].[Location]...';


GO
ALTER TABLE [dbo].[Location] WITH NOCHECK
    ADD FOREIGN KEY ([Address]) REFERENCES [dbo].[Address] ([Id]);


GO
PRINT N'Creating unnamed constraint on [dbo].[Room]...';


GO
ALTER TABLE [dbo].[Room] WITH NOCHECK
    ADD FOREIGN KEY ([Sector]) REFERENCES [dbo].[Sector] ([Id]);


GO
PRINT N'Creating unnamed constraint on [dbo].[Sector]...';


GO
ALTER TABLE [dbo].[Sector] WITH NOCHECK
    ADD FOREIGN KEY ([Location]) REFERENCES [dbo].[Location] ([Id]);


GO
PRINT N'Altering [dbo].[viServer]...';


GO
ALTER VIEW [dbo].[viServer]
	AS SELECT Server.Id, 
	Server.Name,
	Server.Comment,
	Network.Name AS MemberOff,
	second.Name AS VirtualHost,
	Server.CreationTime,
	Server.IPAddress,
	Room.Name AS Room,
	Sector.Name AS Sector,
	Location.Name AS Location,
	Address.Number AS LotNumber,
	Address.Street,
	Address.ZIP,
	Address.City,
	Address.Country
	FROM Server
	INNER JOIN Network on Server.MemberOff = Network.Id
	Inner JOIN Server second on Server.VirtualHost = second.Id
	INNER JOIN Room on Server.Room = Room.Id
	INNER JOIN Sector on Room.Sector = Sector.Id
	Inner JOIN Location on Sector.Location = Location.Id
	Inner JOIN Address on Location.Address = Address.Id
	WHERE Server.DeleteTime IS NULL AND Server.Id != 24
GO
PRINT N'Refreshing [dbo].[viService]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[viService]';


GO
PRINT N'Creating [dbo].[viAddress]...';


GO
CREATE VIEW [dbo].[viAddress]
	AS SELECT Address.Id, 
	Address.Number,
	Address.Street,
	Address.ZIP,
	Address.City,
	Address.Country,
	Address.CreationTime
	FROM Address
	WHERE Address.DeleteTime IS NULL AND Address.Id != 0
GO
PRINT N'Creating [dbo].[viLocation]...';


GO
CREATE VIEW [dbo].[viLocation]
	AS SELECT Location.Id, 
	Location.Name,
	Address.Number AS LotNumber,
	Address.Street AS Street,
	Address.ZIP AS ZIP,
	Address.City AS City,
	Address.Country AS Country,
	Location.CreationTime
	FROM Location
	INNER JOIN Address on Location.Address = Address.Id
	WHERE Location.DeleteTime IS NULL AND Location.Id != 0
GO
PRINT N'Creating [dbo].[viRoom]...';


GO
CREATE VIEW [dbo].[viRoom]
	AS SELECT
		Room.Name,
		Sector.Name AS Sector,
		Location.Name AS Location,
		Address.Number AS LotNumber,
		Address.Street AS Street,
		Address.ZIP AS ZIP,
		Address.City AS City,
		Address.Country AS Country
	FROM [Room]
	INNER JOIN Sector on Room.Sector = Sector.Id
	Inner JOIN Location on Sector.Location = Location.Id
	Inner JOIN Address on Location.Address = Address.Id
	WHERE Room.DeleteTime IS NULL AND Room.Id != 0
GO
PRINT N'Creating [dbo].[viSector]...';


GO
CREATE VIEW [dbo].[viSector]
	AS SELECT
		Sector.Name,
		Location.Name AS Location,
		Address.Number AS LotNumber,
		Address.Street AS Street,
		Address.ZIP AS ZIP,
		Address.City AS City,
		Address.Country AS Country
	FROM [Sector]
	Inner JOIN Location on Sector.Location = Location.Id
	Inner JOIN Address on Location.Address = Address.Id
	WHERE Sector.DeleteTime IS NULL AND SECTOR.Id != 0
GO
PRINT N'Altering [dbo].[CreateServer]...';


GO
ALTER PROCEDURE [dbo].[CreateServer]
	@StartTime datetimeoffset,
	@Name nvarchar(64),
	@Comment nvarchar(MAX),
	@MemberOff nvarchar(64),
	@VirtualHost nvarchar(64),
	@IPAddress nvarchar(16),
	@Room nvarchar(16),
	@Sector varchar(8),
	@Location nvarchar(32)

AS
begin
	declare @dbId int
	declare @weekdayname int
	declare @nId int
	declare @sId int
	declare @RoomId int
	set @weekdayname = DATEPART(WEEKDAY, @StartTime)
	IF @MemberOff = N'' set @nId = 19
	ELSE set @nId = (SELECT Id FROM Network WHERE Name = @MemberOff)
	IF @VirtualHost = N'' set @sId =24
	ELSE set @sId = (SELECT Id FROM Server WHERE Name = @VirtualHost)
	set @RoomId = (SELECT Id FROM Room WHERE Sector =
		(SELECT Id FROM Sector WHERE Location =
			(SELECT Id FROM Location WHERE Location.Name = @Location	
			)
		)
	)
				
	INSERT INTO Server
	(Comment, Name, MemberOff, VirtualHost, IPAddress, Room)
	values
	(@Comment, @Name, @nId, @sId, @IPAddress, @RoomId)
	set @dbId = SCOPE_IDENTITY()
	SELECT * FROM viServer WHERE Id = @dbId
	
end
GO
PRINT N'Refreshing [dbo].[CreateService]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[CreateService]';


GO
PRINT N'Refreshing [dbo].[DeleteServer]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[DeleteServer]';


GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
CREATE TABLE [#__checkStatus] (
    id           INT            IDENTITY (1, 1) PRIMARY KEY CLUSTERED,
    [Schema]     NVARCHAR (256),
    [Table]      NVARCHAR (256),
    [Constraint] NVARCHAR (256)
);

SET NOCOUNT ON;

DECLARE tableconstraintnames CURSOR LOCAL FORWARD_ONLY
    FOR SELECT SCHEMA_NAME([schema_id]),
               OBJECT_NAME([parent_object_id]),
               [name],
               0
        FROM   [sys].[objects]
        WHERE  [parent_object_id] IN (OBJECT_ID(N'dbo.Server'), OBJECT_ID(N'dbo.Service'), OBJECT_ID(N'dbo.Location'), OBJECT_ID(N'dbo.Room'), OBJECT_ID(N'dbo.Sector'))
               AND [type] IN (N'F', N'C')
                   AND [object_id] IN (SELECT [object_id]
                                       FROM   [sys].[check_constraints]
                                       WHERE  [is_not_trusted] <> 0
                                              AND [is_disabled] = 0
                                       UNION
                                       SELECT [object_id]
                                       FROM   [sys].[foreign_keys]
                                       WHERE  [is_not_trusted] <> 0
                                              AND [is_disabled] = 0);

DECLARE @schemaname AS NVARCHAR (256);

DECLARE @tablename AS NVARCHAR (256);

DECLARE @checkname AS NVARCHAR (256);

DECLARE @is_not_trusted AS INT;

DECLARE @statement AS NVARCHAR (1024);

BEGIN TRY
    OPEN tableconstraintnames;
    FETCH tableconstraintnames INTO @schemaname, @tablename, @checkname, @is_not_trusted;
    WHILE @@fetch_status = 0
        BEGIN
            PRINT N'Checking constraint: ' + @checkname + N' [' + @schemaname + N'].[' + @tablename + N']';
            SET @statement = N'ALTER TABLE [' + @schemaname + N'].[' + @tablename + N'] WITH ' + CASE @is_not_trusted WHEN 0 THEN N'CHECK' ELSE N'NOCHECK' END + N' CHECK CONSTRAINT [' + @checkname + N']';
            BEGIN TRY
                EXECUTE [sp_executesql] @statement;
            END TRY
            BEGIN CATCH
                INSERT  [#__checkStatus] ([Schema], [Table], [Constraint])
                VALUES                  (@schemaname, @tablename, @checkname);
            END CATCH
            FETCH tableconstraintnames INTO @schemaname, @tablename, @checkname, @is_not_trusted;
        END
END TRY
BEGIN CATCH
    PRINT ERROR_MESSAGE();
END CATCH

IF CURSOR_STATUS(N'LOCAL', N'tableconstraintnames') >= 0
    CLOSE tableconstraintnames;

IF CURSOR_STATUS(N'LOCAL', N'tableconstraintnames') = -1
    DEALLOCATE tableconstraintnames;

SELECT N'Constraint verification failed:' + [Schema] + N'.' + [Table] + N',' + [Constraint]
FROM   [#__checkStatus];

IF @@ROWCOUNT > 0
    BEGIN
        DROP TABLE [#__checkStatus];
        RAISERROR (N'An error occurred while verifying constraints', 16, 127);
    END

SET NOCOUNT OFF;

DROP TABLE [#__checkStatus];


GO
PRINT N'Update complete.';


GO
